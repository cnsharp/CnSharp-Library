// <auto-generated />
using System;
using CnSharp.Data.UnitTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CnSharp.Data.UnitTest.Migrations
{
    [DbContext(typeof(TestSequenceDbContext))]
    [Migration("20240225142114_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CnSharp.Data.SerialNumber.SerialNumberRolling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.Property<long>("CurrentValue")
                        .HasColumnType("bigint");

                    b.Property<string>("Date")
                        .HasColumnType("char(10)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("SerialNumberRolling");
                });

            modelBuilder.Entity("CnSharp.Data.SerialNumber.SerialNumberRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<string>("NumberPattern")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.Property<string>("SequencePattern")
                        .HasColumnType("varchar(32)")
                        .HasMaxLength(32);

                    b.Property<int>("StartValue")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SerialNumberRule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fd7bf8a-ba9f-4f92-8605-9f692c698e3e"),
                            Code = "PO",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 2, 25, 22, 21, 13, 947, DateTimeKind.Unspecified).AddTicks(5651), new TimeSpan(0, 8, 0, 0, 0)),
                            DateUpdated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NumberPattern = "%wid%PO%yyyyMMdd%%06d%",
                            SequencePattern = "%wid%PO",
                            StartValue = 1,
                            Step = 1
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
